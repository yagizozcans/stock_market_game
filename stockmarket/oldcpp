#include <SFML/Graphics.hpp>
#include <random>
#include <iostream>
#include <vector>
#include <cmath>

template <typename T>
T& clamp(T& val,const T& low,const T& high)
{
    if(val >= high)
        val = high;
    if(val <= low)
        val = low;
    return val;
}

class s_line_data
{
    std::vector<sf::RectangleShape> lines;
    float s_minVal;
    float s_maxVal;
public:
    s_line_data(float lineWidth,float minVal,float maxVal)
    : s_lineWidth(lineWidth),s_minVal(minVal),s_maxVal(maxVal)
    {
    }
    float s_lineWidth;
    int lineOrder = 0;
    int currentYValue = 0;

    void addLine(sf::RectangleShape line)
    {
        lines.push_back(line);
    }
};

int main()
{
    const int width = 640;
    const int height = 480;
    const float lineThickness = 1.0f;
    float currentYValue = 0;
    float lineWidth = 1.0f;
    int lineOrder = 0;
    sf::RenderWindow window(sf::VideoMode(width, height), "SFML Application");
    window.setFramerateLimit(60);
    std::vector<sf::RectangleShape> lines;
    std::vector<s_line_data> lineDatas;
    lineDatas.push_back(s_line_data(2.0f,-8.0f,4.0f));
    lineDatas.push_back(s_line_data(3.0f,-12.0f,9.0f));
    while (window.isOpen())
    {
        sf::Event event;
        for(auto& s_line_data : lineDatas)
        {
            std::random_device rd;

            std::mt19937 generator(rd());

            float minVal = -10.0f;
            float maxVal = 5.0f;
            std::uniform_real_distribution<float> distribution(minVal, maxVal);
        }

        float lastYValue = currentYValue;
        float randomValue = distribution(generator);
        currentYValue += randomValue;
        currentYValue = clamp<float>(currentYValue,-height,0);
        float degree = atanf(randomValue / lineWidth) * 180 / M_PI;
        sf::RectangleShape line(sf::Vector2f(sqrt(randomValue*randomValue + lineWidth*lineWidth),lineThickness));
        line.setPosition(sf::Vector2f(lineOrder * lineWidth,height - lineThickness * 3 + lastYValue));
        line.rotate(degree);
        line.setFillColor(sf::Color::Blue);
        lines.push_back(line);
        lineOrder++;
        while (window.pollEvent(event))
        {
            if (event.type == sf::Event::Closed)
                window.close();
        }



        window.clear(sf::Color::Black);
        for(const auto& baseLine : lines)
        {
            window.draw(baseLine);
        }
        window.display();
    }
}